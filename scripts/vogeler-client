#!/usr/bin/env python
"""
    Author: John E. Vincent
	Email:	lusis.org+github.com@gmail.com
"""

import argparse
import pprint

from vogeler.client import VogelerClient
from vogeler.exceptions import VogelerClientException
from vogeler.plugins import VogelerPlugin

import vogeler.log as logger
import vogeler.conf as conf

pp = pprint.PrettyPrinter(indent=4)

def process_request(request):
    try:
        results = plugins.execute_plugin(request)
        c.message(results)
    except OSError, e:
        log.error("Unable to process request: %s" % request)
        raise

    if args.oneshot == True:
        print "Oneshot requested. Running command %s and exiting" % request
        shutdown()

def startup():
    c.monitor()

def shutdown():
    print "Shutting down"
    c.close()
    return 0
    exit

def execute_run(*args, **kwargs):
    global plugdir, mq, c, plugins
    try:
#        plugdir = pargs.plugdir or local_config.get('global', 'plugin_path') or None
        plugins = VogelerPlugin(plugin_dir=plugdir)
        c = VogelerClient(callback_function=process_request, dsn=mq)
        startup()
    except KeyboardInterrupt:
        shutdown()
    except:
        raise #VogelerClientException("Unable to start up")

def list_plugins(*args, **kwargs):
    global plugdir
#    plugdir = pargs.plugindir or local_config.get('global', 'plugin_path') or None
    try:
        plugins = VogelerPlugin(plugin_dir=plugdir)
        if len(plugins.authorized_plugins) == 0:
            log.warn("No plugins are registered with the system")
        else:
            pp.pprint(plugins.plugin_registry)
    except Exception, e:
        log.error("Unable to list plugins")
        raise VogelerClientException(e)

if __name__ == "__main__":
    appdesc = 'Vogeler client daemon'
    parser = argparse.ArgumentParser(description=appdesc)
    subparsers = parser.add_subparsers(help='commands')
    parser.add_argument('--plugin_dir', '-p',
                    help='Specifiy location of trusted plugins',
                    required=False)
    parser.add_argument('--config', '-c',
                    help="Location of configuration file",
                    required=False)
    # runtime options
    runtime_parser = subparsers.add_parser('run', help='Runtime commands')
    runtime_parser.add_argument('--oneshot', '-o',
                    action="store_true",
                    default=False,
                    help='Exit after first command')
    runtime_parser.add_argument('--allow-unsafe', '-u',
                    action="store_true",
                    default=False,
                    help='WARNING: This options accepts any command that the client recieves. Use with caution!')
    runtime_parser.add_argument('--qhost',
                    help='RabbitMQ server dsn',
                    required=False)
    runtime_parser.set_defaults(func=execute_run)

    # Noop options
    list_parser = subparsers.add_parser('list', help='List plugins')
    list_parser.set_defaults(func=list_plugins)

    args = parser.parse_args()

    if args.config:
        try:
            local_config = conf.configure(cfg=args.config)
            if local_config.has_option('global', 'log_level'):
                log_level = local_config.get('global', 'log_level') or 'DEBUG'
                log = logger.setup_logger(logLevel=log_level) 
        except:
            pass
    global plugdir, mq

    try:
        plugdir = args.plugin_dir or local_config.get('global', 'plugin_path')
    except Exception, e:
        plugdir = None

    try:
        mq = args.qhost or local_config.get('amqp', 'dsn')
    except Exception, e:
        mq = None

    args.func(args)

# vim: set ts=4 et sw=4 sts=4 sta filetype=python :
